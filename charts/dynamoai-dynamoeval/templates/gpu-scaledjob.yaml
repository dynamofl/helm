{{- if $.Values.pentest.enabled }}
{{- range .Values.pentest.gpuConfig }}
---
apiVersion: keda.sh/v1alpha1
kind: ScaledJob
metadata:
  name: scaled-job-gpu-{{ .type }}-{{ .count }}
spec:
  jobTargetRef:
    parallelism: 1
    completions: 1
    template:
      spec:
        tolerations:
          - key: nvidia.com/gpu
            operator: Exists
            effect: NoSchedule
          - key: gpu-type
            operator: Equal
            value: {{ .type }}
            effect: NoSchedule
        volumes:
          - name: api-key-secret-volume
            secret:
              secretName: {{ $.Values.global.secrets.apikeys }}
        containers:
          - name: redis-client
            image: {{ $.Values.pentest.image.registry }}/{{ $.Values.pentest.image.repository }}:{{ $.Values.pentest.image.tag }}
            imagePullPolicy: {{ $.Values.pentest.image.pullPolicy }}
            volumeMounts:
              - name: api-key-secret-volume
                mountPath: /var/secrets
                readOnly: true
            resources:
              requests:
                nvidia.com/gpu: {{ .count | quote }}
              limits:
                nvidia.com/gpu: {{ .count | quote }}
            env:
              {{- if $.Values.nats.enabled }}
              - name: NATS_SERVER
                value: {{ $.Values.nats.serverUrl }}
              - name: NATS_ENABLED
                value: "true"
              - name: NATS_SUBJECT_FILTER
                value: {{- include "dynamoai.natsGpuConsumerSubjectFilter" (dict "subjectprefix" $.Values.pentest.natsSubjectFilter "type" .type "count" .count) | indent 1 }}
              - name: NATS_CONSUMER_NAME
                value: {{- include "dynamoai.natsGpuConsumerName" (dict "subjectprefix" $.Values.pentest.natsSubjectFilter "type" .type "count" .count) | indent 1 }}
              {{- end }}
              {{- include "dynamoai.commonEnv" $ | nindent 14 }}
              {{- include "dynamoai.pentestEnv" $ | nindent 14 }}
              {{- include "dynamoai.scaledJobCommonEnv" $ | nindent 14 }}
              {{- include "dynamoai.gpuTypeCountScaledJobEnv" . | nindent 14 }}
              {{- with $.Values.pentest.extraEnv }}
              {{- toYaml . | nindent 14 }}
              {{- end }}
            {{- if $.Values.global.config.proxy }}
            envFrom:
              - configMapRef:
                  name: {{ $.Values.global.config.proxy }}
            {{- end }}
        restartPolicy: Never
  pollingInterval: 10
  minReplicaCount: 0
  maxReplicaCount: 100
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 2
  triggers:
    - type: external
      metadata:
        scalerAddress: {{ $.Values.metricsServer.address }}
        listName: queue-{{ .type }}-{{ .count }}
        listLength: '1'
    - type: nats-jetstream
      metadata:
        natsServerMonitoringEndpoint: "dynamoai-base-nats-headless.{{ $.Release.Namespace }}.svc.cluster.local:8222"
        account: '$G'
        stream: {{ $.Values.nats.stream.name }}
        consumer: {{ include "dynamoai.natsGpuConsumerName" (dict "subjectprefix" $.Values.pentest.natsSubjectFilter "type" .type "count" .count) }}
        lagThreshold: '5'
        activationLagThreshold: '1'
        useHttps: 'false'
{{- end }}
{{- end }}
